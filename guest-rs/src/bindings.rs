// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    #[allow(dead_code, clippy::all)]
    pub mod intf {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() = super::super::__link_custom_section_describing_imports;
        use super::super::_rt;
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Image {
            handle: _rt::Resource<Image>,
        }
        type _ImageRep<T> = Option<T>;
        impl Image {
            /// Creates a new resource from the specified representation.
            ///
            /// This function will create a new resource handle by moving `val` onto
            /// the heap and then passing that heap pointer to the component model to
            /// create a handle. The owned handle is then returned as `Image`.
            pub fn new<T: GuestImage>(val: T) -> Self {
                Self::type_guard::<T>();
                let val: _ImageRep<T> = Some(val);
                let ptr: *mut _ImageRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
            }
            /// Gets access to the underlying `T` which represents this resource.
            pub fn get<T: GuestImage>(&self) -> &T {
                let ptr = unsafe { &*self.as_ptr::<T>() };
                ptr.as_ref().unwrap()
            }
            /// Gets mutable access to the underlying `T` which represents this
            /// resource.
            pub fn get_mut<T: GuestImage>(&mut self) -> &mut T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.as_mut().unwrap()
            }
            /// Consumes this resource and returns the underlying `T`.
            pub fn into_inner<T: GuestImage>(self) -> T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.take().unwrap()
            }
            #[doc(hidden)]
            pub unsafe fn from_handle(handle: u32) -> Self {
                Self {
                    handle: _rt::Resource::from_handle(handle),
                }
            }
            #[doc(hidden)]
            pub fn take_handle(&self) -> u32 {
                _rt::Resource::take_handle(&self.handle)
            }
            #[doc(hidden)]
            pub fn handle(&self) -> u32 {
                _rt::Resource::handle(&self.handle)
            }
            #[doc(hidden)]
            fn type_guard<T: 'static>() {
                use core::any::TypeId;
                static mut LAST_TYPE: Option<TypeId> = None;
                unsafe {
                    assert!(! cfg!(target_feature = "atomics"));
                    let id = TypeId::of::<T>();
                    match LAST_TYPE {
                        Some(ty) => {
                            assert!(
                                ty == id, "cannot use two types with this resource type"
                            )
                        }
                        None => LAST_TYPE = Some(id),
                    }
                }
            }
            #[doc(hidden)]
            pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                Self::type_guard::<T>();
                let _ = _rt::Box::from_raw(handle as *mut _ImageRep<T>);
            }
            fn as_ptr<T: GuestImage>(&self) -> *mut _ImageRep<T> {
                Image::type_guard::<T>();
                T::_resource_rep(self.handle()).cast()
            }
        }
        /// A borrowed version of [`Image`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct ImageBorrow<'a> {
            rep: *mut u8,
            _marker: core::marker::PhantomData<&'a Image>,
        }
        impl<'a> ImageBorrow<'a> {
            #[doc(hidden)]
            pub unsafe fn lift(rep: usize) -> Self {
                Self {
                    rep: rep as *mut u8,
                    _marker: core::marker::PhantomData,
                }
            }
            /// Gets access to the underlying `T` in this resource.
            pub fn get<T: GuestImage>(&self) -> &T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.as_ref().unwrap()
            }
            fn as_ptr<T: 'static>(&self) -> *mut _ImageRep<T> {
                Image::type_guard::<T>();
                self.rep.cast()
            }
        }
        unsafe impl _rt::WasmResource for Image {
            #[inline]
            unsafe fn drop(_handle: u32) {
                #[cfg(not(target_arch = "wasm32"))]
                unreachable!();
                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]intf")]
                    extern "C" {
                        #[link_name = "[resource-drop]image"]
                        fn drop(_: u32);
                    }
                    drop(_handle);
                }
            }
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_print_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let len0 = arg1;
            let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
            T::print(_rt::string_lift(bytes0));
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_hello_cabi<T: Guest>() -> *mut u8 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let result0 = T::hello();
            let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
            let vec2 = (result0.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(4).cast::<usize>() = len2;
            *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
            ptr1
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_hello<T: Guest>(arg0: *mut u8) {
            let l0 = *arg0.add(0).cast::<*mut u8>();
            let l1 = *arg0.add(4).cast::<usize>();
            _rt::cabi_dealloc(l0, l1, 1);
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_load_image_cabi<T: Guest>(
            arg0: *mut u8,
            arg1: usize,
        ) -> i32 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let len0 = arg1;
            let result1 = T::load_image(
                _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
            );
            (result1).take_handle() as i32
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_resize_image_cabi<T: Guest>(
            arg0: i32,
            arg1: i32,
            arg2: i32,
        ) -> i32 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let result0 = T::resize_image(
                ImageBorrow::lift(arg0 as u32 as usize),
                arg1 as u32,
                arg2 as u32,
            );
            (result0).take_handle() as i32
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_image_to_bytes_cabi<T: Guest>(arg0: i32) -> *mut u8 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let result0 = T::image_to_bytes(ImageBorrow::lift(arg0 as u32 as usize));
            let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
            let vec2 = (result0).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(4).cast::<usize>() = len2;
            *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
            ptr1
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_image_to_bytes<T: Guest>(arg0: *mut u8) {
            let l0 = *arg0.add(0).cast::<*mut u8>();
            let l1 = *arg0.add(4).cast::<usize>();
            let base2 = l0;
            let len2 = l1;
            _rt::cabi_dealloc(base2, len2 * 1, 1);
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_extract_emails_cabi<T: Guest>(
            arg0: *mut u8,
            arg1: usize,
        ) -> *mut u8 {
            #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
            let len0 = arg1;
            let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
            let result1 = T::extract_emails(_rt::string_lift(bytes0));
            let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
            let vec4 = result1;
            let len4 = vec4.len();
            let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                vec4.len() * 8,
                4,
            );
            let result4 = if layout4.size() != 0 {
                let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout4);
                }
                ptr
            } else {
                ::core::ptr::null_mut()
            };
            for (i, e) in vec4.into_iter().enumerate() {
                let base = result4.add(i * 8);
                {
                    let vec3 = (e.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *base.add(4).cast::<usize>() = len3;
                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                }
            }
            *ptr2.add(4).cast::<usize>() = len4;
            *ptr2.add(0).cast::<*mut u8>() = result4;
            ptr2
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_extract_emails<T: Guest>(arg0: *mut u8) {
            let l0 = *arg0.add(0).cast::<*mut u8>();
            let l1 = *arg0.add(4).cast::<usize>();
            let base4 = l0;
            let len4 = l1;
            for i in 0..len4 {
                let base = base4.add(i * 8);
                {
                    let l2 = *base.add(0).cast::<*mut u8>();
                    let l3 = *base.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                }
            }
            _rt::cabi_dealloc(base4, len4 * 8, 4);
        }
        pub trait Guest {
            type Image: GuestImage;
            fn print(input: _rt::String);
            fn hello() -> _rt::String;
            fn load_image(bytes: _rt::Vec<u8>) -> Image;
            fn resize_image(self_: ImageBorrow<'_>, width: u32, height: u32) -> Image;
            fn image_to_bytes(self_: ImageBorrow<'_>) -> _rt::Vec<u8>;
            fn extract_emails(input: _rt::String) -> _rt::Vec<_rt::String>;
        }
        pub trait GuestImage: 'static {
            #[doc(hidden)]
            unsafe fn _resource_new(val: *mut u8) -> u32
            where
                Self: Sized,
            {
                #[cfg(not(target_arch = "wasm32"))]
                {
                    let _ = val;
                    unreachable!();
                }
                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]intf")]
                    extern "C" {
                        #[link_name = "[resource-new]image"]
                        fn new(_: *mut u8) -> u32;
                    }
                    new(val)
                }
            }
            #[doc(hidden)]
            fn _resource_rep(handle: u32) -> *mut u8
            where
                Self: Sized,
            {
                #[cfg(not(target_arch = "wasm32"))]
                {
                    let _ = handle;
                    unreachable!();
                }
                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]intf")]
                    extern "C" {
                        #[link_name = "[resource-rep]image"]
                        fn rep(_: u32) -> *mut u8;
                    }
                    unsafe { rep(handle) }
                }
            }
        }
        #[doc(hidden)]
        macro_rules! __export_intf_cabi {
            ($ty:ident with_types_in $($path_to_types:tt)*) => {
                const _ : () = { #[export_name = "intf#print"] unsafe extern "C" fn
                export_print(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
                _export_print_cabi::<$ty > (arg0, arg1) } #[export_name = "intf#hello"]
                unsafe extern "C" fn export_hello() -> * mut u8 { $($path_to_types)*::
                _export_hello_cabi::<$ty > () } #[export_name = "cabi_post_intf#hello"]
                unsafe extern "C" fn _post_return_hello(arg0 : * mut u8,) {
                $($path_to_types)*:: __post_return_hello::<$ty > (arg0) } #[export_name =
                "intf#load-image"] unsafe extern "C" fn export_load_image(arg0 : * mut
                u8, arg1 : usize,) -> i32 { $($path_to_types)*::
                _export_load_image_cabi::<$ty > (arg0, arg1) } #[export_name =
                "intf#resize-image"] unsafe extern "C" fn export_resize_image(arg0 : i32,
                arg1 : i32, arg2 : i32,) -> i32 { $($path_to_types)*::
                _export_resize_image_cabi::<$ty > (arg0, arg1, arg2) } #[export_name =
                "intf#image-to-bytes"] unsafe extern "C" fn export_image_to_bytes(arg0 :
                i32,) -> * mut u8 { $($path_to_types)*::
                _export_image_to_bytes_cabi::<$ty > (arg0) } #[export_name =
                "cabi_post_intf#image-to-bytes"] unsafe extern "C" fn
                _post_return_image_to_bytes(arg0 : * mut u8,) { $($path_to_types)*::
                __post_return_image_to_bytes::<$ty > (arg0) } #[export_name =
                "intf#extract-emails"] unsafe extern "C" fn export_extract_emails(arg0 :
                * mut u8, arg1 : usize,) -> * mut u8 { $($path_to_types)*::
                _export_extract_emails_cabi::<$ty > (arg0, arg1) } #[export_name =
                "cabi_post_intf#extract-emails"] unsafe extern "C" fn
                _post_return_extract_emails(arg0 : * mut u8,) { $($path_to_types)*::
                __post_return_extract_emails::<$ty > (arg0) } const _ : () = {
                #[doc(hidden)] #[export_name = "intf#[dtor]image"]
                #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut u8) {
                $($path_to_types)*:: Image::dtor::< <$ty as $($path_to_types)*:: Guest
                >::Image > (rep) } }; };
            };
        }
        #[doc(hidden)]
        pub(crate) use __export_intf_cabi;
        #[repr(align(4))]
        struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
        static mut _RET_AREA: _RetArea = _RetArea(
            [::core::mem::MaybeUninit::uninit(); 8],
        );
    }
}
#[rustfmt::skip]
mod _rt {
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_component_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: exports::intf::__export_intf_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::intf);
    };
}
#[doc(inline)]
pub(crate) use __export_component_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:pkg:component:component:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 364] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xec\x01\x01A\x02\x01\
A\x02\x01B\x11\x04\0\x05image\x03\x01\x01@\x01\x05inputs\x01\0\x04\0\x05print\x01\
\x01\x01@\0\0s\x04\0\x05hello\x01\x02\x01p}\x01i\0\x01@\x01\x05bytes\x03\0\x04\x04\
\0\x0aload-image\x01\x05\x01h\0\x01@\x03\x04self\x06\x05widthy\x06heighty\0\x04\x04\
\0\x0cresize-image\x01\x07\x01@\x01\x04self\x06\0\x03\x04\0\x0eimage-to-bytes\x01\
\x08\x01ps\x01@\x01\x05inputs\0\x09\x04\0\x0eextract-emails\x01\x0a\x04\0\x04int\
f\x05\0\x04\0\x17pkg:component/component\x04\0\x0b\x0f\x01\0\x09component\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.220.0\x10wit-bind\
gen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
